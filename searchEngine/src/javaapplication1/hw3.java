/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javaapplication1;
import java.util.*;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.util.Calendar;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import org.eclipse.persistence.internal.oxm.Constants;

/**
 *
 * @author Jerry
 */
public class hw3 extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    private ArrayList<JCheckBox> AllGenres;
    private ArrayList<JCheckBox> AllCountries;
    private dataBase toSQL;
    private String Status;
    //private Connection con = null;
    private ResultSet Allcountries = null;
    
    public hw3() {
        initComponents();
        AllGenres = new ArrayList<JCheckBox> ();
        AllCountries = new ArrayList<JCheckBox> ();
        toSQL = new dataBase();
        Status = new String();
        Status = "or";
        //Connection con = null;
        //ResultSet result = null;
        //loadData();
        loadData();
        loadActors();
        loadDirector();
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        OR_AND = new javax.swing.JComboBox<>();
        Casts = new javax.swing.JPanel();
        actor1 = new javax.swing.JTextField();
        actor2 = new javax.swing.JTextField();
        actor3 = new javax.swing.JTextField();
        actor4 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        director = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Countries = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        Genres = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        ratingBox = new javax.swing.JComboBox<>();
        ratingValue = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        numRatingBox = new javax.swing.JComboBox<>();
        numRatingValue = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        MovieYearF = new javax.swing.JTextField();
        MovieYearT = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        userid = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        userRatingValue = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        UserRaingBox = new javax.swing.JComboBox<>();
        ratingDateF = new com.toedter.calendar.JDateChooser();
        ratingDateT = new com.toedter.calendar.JDateChooser();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        Resultable = new javax.swing.JScrollPane();
        resultTable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        Query_broad = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        Excute = new javax.swing.JButton();
        rowNums = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel3.setText("Movie Engines");

        OR_AND.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        OR_AND.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "or", "and" }));
        OR_AND.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OR_ANDActionPerformed(evt);
            }
        });

        Casts.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel8.setText("Actor/Actress");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel9.setText("Cast");

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel10.setText("Director");

        javax.swing.GroupLayout CastsLayout = new javax.swing.GroupLayout(Casts);
        Casts.setLayout(CastsLayout);
        CastsLayout.setHorizontalGroup(
            CastsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CastsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(CastsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(director, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)
                    .addComponent(actor4)
                    .addComponent(actor3)
                    .addGroup(CastsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel9)
                        .addGroup(CastsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(actor1)
                    .addComponent(actor2))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        CastsLayout.setVerticalGroup(
            CastsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CastsLayout.createSequentialGroup()
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(actor1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(actor2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(actor3, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(actor4, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(director, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel9.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel13.setText("Country");

        jScrollPane1.setBorder(null);

        javax.swing.GroupLayout CountriesLayout = new javax.swing.GroupLayout(Countries);
        Countries.setLayout(CountriesLayout);
        CountriesLayout.setHorizontalGroup(
            CountriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 132, Short.MAX_VALUE)
        );
        CountriesLayout.setVerticalGroup(
            CountriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 423, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(Countries);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(jLabel13)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(76, 76, 76))
        );

        jPanel10.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel12.setText("Genres");

        javax.swing.GroupLayout GenresLayout = new javax.swing.GroupLayout(Genres);
        Genres.setLayout(GenresLayout);
        GenresLayout.setHorizontalGroup(
            GenresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 139, Short.MAX_VALUE)
        );
        GenresLayout.setVerticalGroup(
            GenresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 406, Short.MAX_VALUE)
        );

        jScrollPane2.setViewportView(Genres);

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addComponent(jLabel12)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(74, 74, 74))
        );

        jPanel11.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));

        ratingBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "=", "<", ">", "<=", ">=" }));
        ratingBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ratingBoxActionPerformed(evt);
            }
        });

        ratingValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ratingValueActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Rating");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Num of Raings");

        numRatingBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "=", "<", ">", "<=", ">=" }));
        numRatingBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numRatingBoxActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Movie Year");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel7.setText("From");

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel11.setText("To");

        MovieYearF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MovieYearFActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(MovieYearT, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(MovieYearF)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel11))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MovieYearF, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MovieYearT, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ratingBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(numRatingBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(ratingValue, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(numRatingValue)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ratingBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(ratingValue, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addGap(5, 5, 5)
                .addComponent(numRatingBox, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(numRatingValue, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
        );

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(6, 6, 6))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));

        userid.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel14.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel14.setText("User Id :");

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel15.setText("Users' Tags and  Rating");

        jLabel16.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel16.setText("From :");

        jLabel17.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel17.setText("To:");

        userRatingValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userRatingValueActionPerformed(evt);
            }
        });

        jLabel18.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel18.setText("User Rating :");

        UserRaingBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "=", ">", "<" }));

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(UserRaingBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel18)
                            .addComponent(userRatingValue, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(jLabel18)
                .addGap(1, 1, 1)
                .addComponent(UserRaingBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(userRatingValue, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(userid, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(ratingDateT, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                                .addComponent(jLabel17)
                                .addGap(171, 171, 171)))))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel15)
                .addGap(28, 28, 28))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ratingDateF, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(userid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ratingDateF, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ratingDateT, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(54, 54, 54))
        );

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Result");

        resultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "title", "Genre", "Year", "Country", "Tag", "Rating", "NumRatings"
            }
        ));
        Resultable.setViewportView(resultTable);

        jScrollPane4.setViewportView(Resultable);

        Query_broad.setColumns(20);
        Query_broad.setRows(5);
        jScrollPane3.setViewportView(Query_broad);

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Query");

        Excute.setText("Execute");
        Excute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExcuteActionPerformed(evt);
            }
        });

        rowNums.setText("                 ");

        jLabel19.setText("rows ");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(177, 177, 177)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(316, 316, 316))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(377, 377, 377))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(OR_AND, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Excute, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Casts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(rowNums, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 424, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(Casts, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(76, 76, 76)
                        .addComponent(OR_AND, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Excute, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(54, 54, 54))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rowNums, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ExcuteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExcuteActionPerformed
        // TODO add your handling code here:
        //Query_broad.setText(generateQ(
        //userDate();
        //Query_broad.setText(generateQ());
        printOut();

    }//GEN-LAST:event_ExcuteActionPerformed
    
    
    
    private void loadData(){
        Connection con = null;
        ResultSet result = null;
        try
        {
           con = toSQL.openConnection();
           System.out.println("Success");
           String Query = "select distinct genre\n" +
           "from GENRES\n";
           result = toSQL.searchAllTuples(con,Query);
           insertAllGenres(result);
           toSQL.showResultSet(result);
           Query = "select distinct country\n" +
           "from COUNTRIES\n";
           result = toSQL.searchAllTuples(con,Query);
           //toSQL.showResultSet(result);
           insertAllCountries(result);
        } catch (SQLException e)
        {
            System.err.println("Errors occurs when communicating with the database server: " + e.getMessage());
        } catch ( ClassNotFoundException e)
        {
            System.err.println("Cannot find the database driver");
        } finally
        {
           toSQL.closeConnection(con);
        }
    }
    
    
    
    private void loadAllCountries(){
        Connection con = null;
        ResultSet result = null;
        try
        {
           con = toSQL.openConnection();
           String Query = "select distinct country\n" +
           "from COUNTRIES\n";
           result = toSQL.searchAllTuples(con,Query);
           insertAllCountries(result);
        } catch (SQLException e){
            System.err.println("Errors occurs when communicating with the database server: " + e.getMessage());
        } catch (ClassNotFoundException e){
            System.err.println("Cannot find the database driver");
        } finally{
           toSQL.closeConnection(con);
        }
    }
    
    
    
    private void loadActors(){
        Connection con = null;
        ResultSet result = null;
        try
        {
           con = toSQL.openConnection();
           String Query = "select distinct actorname\n" +
           "from ACTORS where ROWNUM <= 4\n";
           result = toSQL.searchAllTuples(con,Query);
           insertActors(result);
        } catch (SQLException e){
            System.err.println("Errors occurs when communicating with the database server: " + e.getMessage());
        } catch (ClassNotFoundException e){
            System.err.println("Cannot find the database driver");
        } finally{
           toSQL.closeConnection(con);
        }
    }
    
    
    
    private void loadDirector(){
        Connection con = null;
        ResultSet result = null;
        try
        {
           con = toSQL.openConnection();
           String Query = "select distinct directorname\n" +
           "from Directors where ROWNUM <= 1\n";
           result = toSQL.searchAllTuples(con,Query);
           insertDirector(result);
        } catch (SQLException e){
            System.err.println("Errors occurs when communicating with the database server: " + e.getMessage());
        } catch (ClassNotFoundException e){
            System.err.println("Cannot find the database driver");
        } finally{
           toSQL.closeConnection(con);
        }
    }
    
    
    
    private void insertAllGenres(ResultSet result) throws SQLException
    {
        while (result.next()) {
            Genres.setLayout( new GridLayout(0,1));
            JCheckBox cb = new JCheckBox(result.getString(1));
            cb.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                if(Status == "and")
                {
                    dynamaic_Countries();
                    dynamaic_Actors();
                    dynamaic_director();
                }
                else
                {
                    loadAllCountries();
                    loadActors();
                    loadDirector();
                    //dynamaic_director();
                }
            }
        });
            AllGenres.add(cb);
            Genres.add(cb);
            Genres.revalidate();
            Genres.repaint();
        }
    }
    
    

    private void insertAllCountries(ResultSet result) throws SQLException
    {
        removeAllCountries();  
        while (result.next()) {
            Countries.setLayout( new GridLayout( 0, 1 ) );
            JCheckBox cb = new JCheckBox(result.getString(1));
            AllCountries.add(cb);
            Countries.add(cb);   
            Countries.revalidate();
            Countries.repaint();
           // System.out.print("Tuple " + tupleCount++ + " : ");
           // System.out.print("Tuple " + tupleCount++ + " : "
        }
    }
    

    
    private void insertActors(ResultSet result) throws SQLException
    {
        String[] temp = new String[4];
        int count = 0;
        while (result.next()) {
            temp[count] = result.getString(1);
            ++count;
        }
        for(int i=0; i<4;i++)
        {
            if(temp[i]==null)
                temp[i] = "";
        }
        actor1.setText("");
        actor2.setText("");
        actor3.setText("");
        actor4.setText("");
        actor1.setText(temp[0]);
        actor2.setText(temp[1]);
        actor3.setText(temp[2]);
        actor4.setText(temp[3]);
    }
    

    
    private void insertDirector(ResultSet result) throws SQLException
    {
        director.setText("");
        while (result.next()) {
            director.setText(result.getString(1));
        }
    }


    
    private void removeAllCountries()
    {
        for(int i =0;i<AllCountries.size();i++){
            AllCountries.get(i).setVisible(false);
            Countries.remove(AllCountries.get(i));     
        }
        AllCountries.clear();
        Countries.updateUI(); 
    } 
    
    
    
    private ArrayList <String> checkBoxes()
    {  
        
        ArrayList <String> GenresList = new ArrayList <String> ();
        for(int i=0;i<AllGenres.size();i++)
        {
            if(AllGenres.get(i).isSelected())
            {
                GenresList.add(AllGenres.get(i).getText());
            }
        }
        return GenresList;
    }
   
    
    
    private void ratingBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ratingBoxActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_ratingBoxActionPerformed
    
    
    
    private void dynamaic_Countries()
    {
        ArrayList <String> temp = checkBoxes();
        Connection con = null;
        ResultSet countries  = null;
        if(temp.size() != 0)
        {    
            StringBuilder result = new StringBuilder();
            result.append(
    "Select distinct country\n" +
"from countries MC,\n" +
"(\n" +
"SELECT  movieid, LISTAGG(genre, ',') WITHIN GROUP (ORDER BY genre) AS Genre\n" +
"FROM   genres\n" +
"GROUP BY movieid) G\n" +
"where G.movieid = MC.movieid and ");
            for(int i=0;i<temp.size();i++)
            {
                if(i==0){
                    result.append("G.genre like "+"'%"+temp.get(i)+"%'"+'\n');
                }
                else{
                    result.append("and G.genre like "+"'%"+temp.get(i)+"%'"+"\n");
                }
             }
            //Query_broad.setText(result.toString());
            try{
                con = toSQL.openConnection();
                String Query = result.toString();
                System.out.println(Query);
                countries = toSQL.searchAllTuples(con,Query);
                insertAllCountries(countries);
                }catch (SQLException e){ System.err.println("Errors occurs when communicating with the database server: " + e.getMessage());}catch (
                ClassNotFoundException e){System.err.println("Cannot find the database driver");}finally{toSQL.closeConnection(con);}
        }
        else
        {
            removeAllCountries();
        }
    }
    
    
    
    private void dynamaic_Actors()
    {
        ArrayList <String> temp = checkBoxes();
        Connection con = null;
        ResultSet actors  = null;
        if(!temp.isEmpty())
        {    
            StringBuilder result = new StringBuilder();
            result.append(
    "Select distinct actorname from actors,\n" +
"(\n" +
"SELECT  movieid, LISTAGG(genre, ',') WITHIN GROUP (ORDER BY genre) AS Genre\n" +
"FROM   genres GROUP BY movieid) G\n" +
"where actors.movieid = G.movieid and ROWNUM <= 4 and ");
            for(int i=0;i<temp.size();i++)
            {
                if(i==0){
                    result.append("G.genre like "+"'%"+temp.get(i)+"%'"+'\n');
                }
                else{
                    result.append(" and G.genre like "+"'%"+temp.get(i)+"%'"+"\n");
                }
            }
            //Query_broad.setText(result.toString());
            try{
                con = toSQL.openConnection();
                String Query = result.toString();
                actors = toSQL.searchAllTuples(con,Query);
                insertActors(actors);
                }catch (SQLException e){ System.err.println("Errors occurs when communicating with the database server: " + e.getMessage());}catch (
                ClassNotFoundException e){System.err.println("Cannot find the database driver");}finally{toSQL.closeConnection(con);}
        }
        else
        {
            actor1.setText(""); 
            actor2.setText("");
            actor3.setText("");
            actor4.setText("");
        }
    }
    
    
    
    private void dynamaic_director()
    {
        ArrayList <String> temp = checkBoxes();
        Connection con = null;
        ResultSet director  = null;
        if(temp.size() != 0)
        {    
            StringBuilder result = new StringBuilder();
            result.append(
    "Select distinct directorname from directors,\n" +
"(\n" +
"SELECT  movieid, LISTAGG(genre, ',') WITHIN GROUP (ORDER BY genre) AS Genre\n" +
"FROM   genres GROUP BY movieid) G\n" +
"where directors.movieid = G.movieid and ROWNUM <= 1 and ");
            for(int i=0;i<temp.size();i++)
            {
                if(i==0){
                    result.append("G.genre like "+"'%"+temp.get(i)+"%'"+'\n');
                }
                else{
                    result.append(" and G.genre like "+"'%"+temp.get(i)+"%'"+"\n");
                }
            }
            Query_broad.setText(result.toString());
            try{
                con = toSQL.openConnection();
                String Query = result.toString();
                director = toSQL.searchAllTuples(con,Query);
                insertDirector(director);
                }catch (SQLException e){ System.err.println("Errors occurs when communicating with the database server: " + e.getMessage());}catch (
                ClassNotFoundException e){System.err.println("Cannot find the database driver");}finally{toSQL.closeConnection(con);}
        }
        else
        {
            this.director.setText("");
        }
    }
    
    
   
    private void OR_ANDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OR_ANDActionPerformed

         Status = OR_AND.getSelectedItem().toString();
         if(Status == "and")
         {
             dynamaic_Countries();
             dynamaic_Actors();
             dynamaic_director();
         }
         else
         {
            loadAllCountries();
            loadActors();
            loadDirector();
         }
    }//GEN-LAST:event_OR_ANDActionPerformed

    private void MovieYearFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MovieYearFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MovieYearFActionPerformed

    private void userRatingValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userRatingValueActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_userRatingValueActionPerformed

    private void numRatingBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numRatingBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_numRatingBoxActionPerformed

    private void ratingValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ratingValueActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ratingValueActionPerformed
    
    
    
    private String movie_year()
    {
        String tempF = MovieYearF.getText();
        String tempT = MovieYearT.getText();
            
        if(!MovieYearF.getText().equals("") && !MovieYearT.getText().equals(""))
        {
            return " "+Status+"( Year >= "+tempF+" and"+" Year <= "+tempT+") \n";
        }
        else if(!MovieYearF.getText().equals("") && MovieYearT.getText().equals(""))
        {   
            
            return " "+Status+" Year >= "+tempF+ " \n";
        }
        else
        {
            return "";
        }
    }
    
    
    
    private String genres()
    {
        StringBuilder temp = new StringBuilder();
        for(int i=0;i<AllGenres.size();i++)
        {
            if(AllGenres.get(i).isSelected())
            {
                if(temp.length() == 0)
                {
                    temp.append("Genre like "+"'%"+AllGenres.get(i).getText()+"%'");  
                }
                else
                {
                    temp.append(" "+Status+" "+"Genre like "+"'%"+AllGenres.get(i).getText()+"%'");  
                }
            }
        }
        return temp.toString();
    }
    
    

    private String rating()
    {
        if(!ratingValue.getText().equals(""))
        {
            return " "+Status+" "+"TRUNC((RTALLCRITICSRATING+RTTOPCRITICSRATING+RTTOPRTAUDIENCERATING)/3, 2) "+ratingBox.getSelectedItem().toString()+" "+ratingValue.getText();
        }
        else
        {
            return"";
        }
    }
    
    
    
    private String numRating()
    {
        if(!numRatingValue.getText().equals(""))
        {
            return " "+Status+" "+"TRUNC((RTALLCRITICSNUMREVIEWS+RTTOPCRITICSNUMREVIEWS+RTAUDIENCENUMRATINGS)/3,2) "+numRatingBox.getSelectedItem().toString()+" "+numRatingValue.getText();
        }
        else
        {
            return"";
        }
    }
   
    
    
    private String countries()
    {
        StringBuilder temp = new StringBuilder();
        for(int i=0;i<AllCountries.size();i++)
        {
            if(AllCountries.get(i).isSelected())
            {
                if(!AllCountries.get(i).getText().equals(""))
                    temp.append(" "+Status+" "+"country = "+"'"+AllCountries.get(i).getText()+"'");
                else
                    temp.append(" "+Status+" "+"country is "+" null");
            }
        }
        return temp.toString();
    }
    
    
    
    private String actors()
    {
         StringBuilder temp = new StringBuilder();
        if(!actor1.getText().equals(""))
        {
            temp.append(" "+Status+" "+"actornames like '%"+actor1.getText()+"%'");
        }
        if(!actor2.getText().equals(""))
        {
            temp.append(" "+Status+" "+"actornames like '%"+actor2.getText()+"%'");
        }
        if(!actor3.getText().equals(""))
        {
            temp.append(" "+Status+" "+"actornames like '%"+actor3.getText()+"%'");
        }
        if(!actor4.getText().equals(""))
        {
            temp.append(" "+Status+" "+"actornames like '%"+actor4.getText()+"%'");
        }
        return temp.toString();
    }
    
    
    
    private String director()
    {
        StringBuilder temp = new StringBuilder();
        if(!director.getText().equals(""))
        {
            temp.append(" "+Status+" "+"directorname = '"+director.getText()+"'");
        }
        return temp.toString();
    }
    
 
    
    private String userId()
    {
        if(!userid.getText().equals("") && ratingDateF.getDate() == null && ratingDateT.getDate() ==null && userRatingValue.getText().equals("") )
        {
            return " "+Status+" "+" M.id in (\n" +
"select distinct movieid\n" +
"from user_ratings\n" +
"where userid = '" + userid.getText()+"')";
        }
        else
        {
            return "";
        }
    }
    
    
    
    private String userDate()
    {
        if(ratingDateF.getDate() != null && ratingDateT.getDate() != null)
        {
           String strDateF = DateFormat.getDateInstance().format(ratingDateF.getDate());
           String strDateT = DateFormat.getDateInstance().format(ratingDateT.getDate());
           if(Status.equals("or")) 
           {
                return" or M.id in (\n" +
"select distinct movieid\n" +
"from user_ratings\n" +
"where userid = '" + userid.getText() + "' "+"and"+" ("+"to_Date('"+strDateF +"','YYYY/MM/DD')"+ "<= datetime and "+ "to_Date('"+strDateT +"','YYYY/MM/DD')"+ ">= datetime))";
           }
           else
           {
               return " and M.id in (\n" +
"select distinct movieid\n" +
"from user_ratings\n" +
"where userid = '" + userid.getText() + "' "+"and"+" ("+"to_Date('"+strDateF +"','YYYY/MM/DD')"+ "<= datetime and "+ "to_Date('"+strDateT +"','YYYY/MM/DD')"+ ">= datetime))";
           }
           
        }
        else
        {
            return "";
        }
        
    }
    
    
    
    private String userRating()
    {
        if(!userRatingValue.getText().equals(""))
        {
            if(Status.equals("or"))
            {
                return " or M.id in (\n" +
"select distinct movieid\n" +
"from user_ratings\n" +
"where userid = '" + userid.getText() + "' and rating "+UserRaingBox.getSelectedItem().toString()+userRatingValue.getText() +")";
            }
            else
            {
                return " and M.id in (\n" +
"select distinct movieid\n" +
"from user_ratings\n" +
"where userid = '" + userid.getText() + "' and rating "+UserRaingBox.getSelectedItem().toString()+userRatingValue.getText() +")";
            }
        }
        else
        {
            return "";
        }
    }
    
    
    
    private String tables(StringBuilder tableWhere)
    {
        StringBuilder table= new StringBuilder();
        if(!actor1.getText().equals("") || !actor2.getText().equals("") || !actor3.getText().equals("") || !actor4.getText().equals(""))
        {
            if(Status == "and")
            {
                table.append(",(\n" +
"SELECT  movieid, LISTAGG(actorname, ',') WITHIN GROUP (ORDER BY actorname) AS actornames\n" +
"FROM   actors\n" +
"GROUP BY movieid\n" +
")A");
                tableWhere.append(" and A.movieid = M.id");
            }
            else
            {
                table.append("\nLEFT OUTER JOIN\n" +
"(SELECT  movieid, LISTAGG(actorname, ',') WITHIN GROUP (ORDER BY actorname) AS actornames\n" +
"FROM   actors\n" +
"GROUP BY movieid\n" +
")A on A.movieid = M.id");
            }
        }
        if(!director.getText().equals(""))
        {
            if(Status == "and")
            {
                table.append(",directors D");
                tableWhere.append(" and D.movieid = M.id");
            }
            else
            {
                table.append("\nLEFT OUTER JOIN\n" +
"(directors) D on D.movieid = M.id");
            }
        }
        return table.toString();
    }
    
          
    
   private String generateQ()
   {
      if(checkInput())
      {
       StringBuilder join = new StringBuilder();
       String selectFrom = "Select distinct title, G.genre as Genre,  year, country, TAG, TRUNC((RTALLCRITICSRATING+RTTOPCRITICSRATING+RTTOPRTAUDIENCERATING)/3, 2) as rating, TRUNC((RTALLCRITICSNUMREVIEWS+RTTOPCRITICSNUMREVIEWS+RTAUDIENCENUMRATINGS)/3,2) as numReviews\n" +
"from movies M\n" +
"LEFT OUTER JOIN \n" +
"(\n" +
"SELECT  movieid, LISTAGG(TagName, ',') WITHIN GROUP (ORDER BY TagName) AS TAG\n" +
"FROM   Movie_Tags, Tags\n" +
"where tagid = tags.id\n" +
"GROUP BY movieid\n" +
") T on T.movieid = M.id"+ tables(join)+
", countries mC,\n" +
"(\n" +
"SELECT  genres.movieid, LISTAGG(genre, ',') WITHIN GROUP (ORDER BY genre) AS Genre\n" +
"FROM   genres\n" +
"GROUP BY genres.movieid) G";//+tables(join);
       String where = "\nwhere  M.id = mC.movieid and M.id = G.movieid"+join.toString()+" and(\n"+ genres()+countries()+actors()+director()+rating()+numRating()+movie_year()+userId()+userDate()+userRating()+")";
       StringBuilder finalQ = new StringBuilder();
       finalQ.append(selectFrom);
       finalQ.append(where);
       return finalQ.toString();
      }
      else
      {
          JOptionPane.showMessageDialog(null, "User id need to be filled out", "InfoBox: ", JOptionPane.INFORMATION_MESSAGE);
          return "";
      }
   }
   
   
   
   private Boolean checkInput()
   {
       if(userid.getText().equals("") && (ratingDateF.getDate() != null || ratingDateT.getDate() != null || !userRatingValue.getText().equals("")))
       {
           return false;
       }
       else
       {
           return true;
       }
   }
          
   
   
    private void printOut()
    {
        Connection con = null;
        ResultSet result = null;
        
        try
        {
           con = toSQL.openConnection();
           Statement stmt = con.createStatement();
           Query_broad.setText(generateQ());
           result = stmt.executeQuery(generateQ());
           java.sql.ResultSetMetaData rsmd = result.getMetaData();
           int colNo = rsmd.getColumnCount();
           
           DefaultTableModel aModel = new DefaultTableModel();
           resultTable.setModel(aModel);
           
           for(int i=1; i<=colNo;i++){
               aModel.addColumn(rsmd.getColumnLabel(i));
           }
           int count = 0;
           while(result.next()){
                Object[] objects = new Object[colNo];
                for(int i=0;i<colNo;i++){
                objects[i]=result.getObject(i+1);
            }
            count++;
            
            aModel.addRow(objects);
        }
        rowNums.setText(Integer.toString(count));
        } catch (SQLException e)
        {
            System.err.println("Errors occurs when communicating with the database server: " + e.getMessage());
        } catch ( ClassNotFoundException e)
        {
            System.err.println("Cannot find the database driver");
        } finally
        {
           toSQL.closeConnection(con);
        }
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(hw3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(hw3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(hw3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(hw3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
            
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new hw3().setVisible(true);
            }
        });
    }
    //private JPanel Panel1;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Casts;
    private javax.swing.JPanel Countries;
    private javax.swing.JButton Excute;
    private javax.swing.JPanel Genres;
    private javax.swing.JTextField MovieYearF;
    private javax.swing.JTextField MovieYearT;
    private javax.swing.JComboBox<String> OR_AND;
    private javax.swing.JTextArea Query_broad;
    private javax.swing.JScrollPane Resultable;
    private javax.swing.JComboBox<String> UserRaingBox;
    private javax.swing.JTextField actor1;
    private javax.swing.JTextField actor2;
    private javax.swing.JTextField actor3;
    private javax.swing.JTextField actor4;
    private javax.swing.JTextField director;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JComboBox<String> numRatingBox;
    private javax.swing.JTextField numRatingValue;
    private javax.swing.JComboBox<String> ratingBox;
    private com.toedter.calendar.JDateChooser ratingDateF;
    private com.toedter.calendar.JDateChooser ratingDateT;
    private javax.swing.JTextField ratingValue;
    private javax.swing.JTable resultTable;
    private javax.swing.JTextField rowNums;
    private javax.swing.JTextField userRatingValue;
    private javax.swing.JTextField userid;
    // End of variables declaration//GEN-END:variables
}
